
Lab3_temp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000130  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000001a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006c1  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000619  00000000  00000000  00000909  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ef  00000000  00000000  00000f22  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00001214  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000035d  00000000  00000000  00001278  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000100  00000000  00000000  000015d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000016d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  74:	0c 94 96 00 	jmp	0x12c	; 0x12c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <timer0_init>:
// Define variables
volatile uint8_t count = 0; // Counter variable

// Define timer0 normal mode initialization function with external clock
void timer0_init() {
	TCCR0 = 0; // Normal mode
  7c:	13 be       	out	0x33, r1	; 51
	TCCR0 = (1 << CS00) | (1 << CS02); // Prescaler = 1024
  7e:	85 e0       	ldi	r24, 0x05	; 5
  80:	83 bf       	out	0x33, r24	; 51
	TIMSK = (1 << TOIE0); // Enable timer overflow interrupt
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	89 bf       	out	0x39, r24	; 57
  86:	08 95       	ret

00000088 <delay_ms>:
}

// Define delay function
void delay_ms(uint16_t ms) {
	while (ms--) {
  88:	07 c0       	rjmp	.+14     	; 0x98 <delay_ms+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	89 ef       	ldi	r24, 0xF9	; 249
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <delay_ms+0x6>
  92:	00 c0       	rjmp	.+0      	; 0x94 <delay_ms+0xc>
  94:	00 00       	nop
  96:	c9 01       	movw	r24, r18
  98:	9c 01       	movw	r18, r24
  9a:	21 50       	subi	r18, 0x01	; 1
  9c:	31 09       	sbc	r19, r1
  9e:	89 2b       	or	r24, r25
  a0:	a1 f7       	brne	.-24     	; 0x8a <delay_ms+0x2>
		_delay_ms(1);
	}
}
  a2:	08 95       	ret

000000a4 <__vector_11>:

// Define timer0 overflow interrupt service routine
ISR(TIMER0_OVF_vect) {
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	8f 93       	push	r24
	count++; // Increment counter
  b0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <count>
  b4:	8f 5f       	subi	r24, 0xFF	; 255
  b6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <count>
}
  ba:	8f 91       	pop	r24
  bc:	0f 90       	pop	r0
  be:	0f be       	out	0x3f, r0	; 63
  c0:	0f 90       	pop	r0
  c2:	1f 90       	pop	r1
  c4:	18 95       	reti

000000c6 <main>:

int main() {
	LED_DDR = LED_MASK; // Set LED pins as output
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	8a bb       	out	0x1a, r24	; 26
	timer0_init(); // Initialize timer0 in normal mode with external clock
  ca:	0e 94 3e 00 	call	0x7c	; 0x7c <timer0_init>

	while (1) {
		// Read counter and check overflow flag
		uint8_t cnt = TCNT0;
  ce:	82 b7       	in	r24, 0x32	; 50
		if (TIFR & (1 << TOV0)) {
  d0:	08 b6       	in	r0, 0x38	; 56
  d2:	00 fe       	sbrs	r0, 0
  d4:	07 c0       	rjmp	.+14     	; 0xe4 <main+0x1e>
			cnt = 0; // Timer overflow, reset counter
			TIFR |= (1 << TOV0); // Clear overflow flag
  d6:	88 b7       	in	r24, 0x38	; 56
  d8:	81 60       	ori	r24, 0x01	; 1
  da:	88 bf       	out	0x38, r24	; 56
			TCCR0 &= ~(1 << CS02) & ~(1 << CS01) & ~(1 << CS00); // Stop timer
  dc:	83 b7       	in	r24, 0x33	; 51
  de:	88 7f       	andi	r24, 0xF8	; 248
  e0:	83 bf       	out	0x33, r24	; 51

	while (1) {
		// Read counter and check overflow flag
		uint8_t cnt = TCNT0;
		if (TIFR & (1 << TOV0)) {
			cnt = 0; // Timer overflow, reset counter
  e2:	80 e0       	ldi	r24, 0x00	; 0
			TIFR |= (1 << TOV0); // Clear overflow flag
			TCCR0 &= ~(1 << CS02) & ~(1 << CS01) & ~(1 << CS00); // Stop timer
		}

		// Display counter on LED pins
		LED_PORT = cnt;
  e4:	8b bb       	out	0x1b, r24	; 27

		// Delay before next read
		delay_ms(DELAY_MS);
  e6:	88 ec       	ldi	r24, 0xC8	; 200
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 44 00 	call	0x88	; 0x88 <delay_ms>
		
		// Check button state and edge
		uint8_t button_state = BUTTON_PORT & BUTTON_MASK;
  ee:	86 b3       	in	r24, 0x16	; 22
  f0:	81 70       	andi	r24, 0x01	; 1
		static uint8_t button_prev_state = 0;
		if (button_state != button_prev_state) {
  f2:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  f6:	82 17       	cp	r24, r18
  f8:	51 f3       	breq	.-44     	; 0xce <main+0x8>
			// Button state changed, check edge
			if (button_state & ~button_prev_state) {
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	20 95       	com	r18
  fe:	30 95       	com	r19
 100:	48 2f       	mov	r20, r24
 102:	50 e0       	ldi	r21, 0x00	; 0
 104:	24 23       	and	r18, r20
 106:	35 23       	and	r19, r21
 108:	23 2b       	or	r18, r19
 10a:	39 f0       	breq	.+14     	; 0x11a <main+0x54>
				// Rising edge, start timer
				TCNT0 = 0; // Reset counter
 10c:	12 be       	out	0x32, r1	; 50
				count = 0; // Reset count variable
 10e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <count>
				TCCR0 |= (1 << CS02) | (1 << CS00); // Prescaler = 1024, external clock
 112:	93 b7       	in	r25, 0x33	; 51
 114:	95 60       	ori	r25, 0x05	; 5
 116:	93 bf       	out	0x33, r25	; 51
 118:	06 c0       	rjmp	.+12     	; 0x126 <main+0x60>
				} else {
				// Falling edge, stop timer and display count
				TCCR0 &= ~(1 << CS02) & ~(1 << CS01) & ~(1 << CS00); // Stop timer
 11a:	93 b7       	in	r25, 0x33	; 51
 11c:	98 7f       	andi	r25, 0xF8	; 248
 11e:	93 bf       	out	0x33, r25	; 51
				LED_PORT = count;
 120:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <count>
 124:	9b bb       	out	0x1b, r25	; 27
			}
			button_prev_state = button_state; // Update button state
 126:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 12a:	d1 cf       	rjmp	.-94     	; 0xce <main+0x8>

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
