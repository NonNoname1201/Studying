
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000110  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000184  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006b1  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005c7  00000000  00000000  000008d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000032c  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  000011cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000032e  00000000  00000000  000011f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000046  00000000  00000000  0000151e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00001564  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:



int main(void)
{
	INPUT = 0b11111111; //ustawienie pinow INPUT(PORTB) na wyjscie
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	87 bb       	out	0x17, r24	; 23
	OUTPUT = 0b11110000; //ustawienie pinow KEYBOARD(PORTA) na wejscie
  80:	80 ef       	ldi	r24, 0xF0	; 240
  82:	8a bb       	out	0x1a, r24	; 26
	KEYBOARD = 0b00001111; //podlaczenie rezystora podci?gaj?cego na 0,1,2,3 pin KEYBORD(PORTA)
  84:	8f e0       	ldi	r24, 0x0F	; 15
  86:	8b bb       	out	0x1b, r24	; 27

	

inline uint8_t klawiatura()
{
	for (i = 4; i < 8; i++) // petla przechodzaca po wszystkim kolumnam klawiatury
  88:	84 e0       	ldi	r24, 0x04	; 4
  8a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <i>
  8e:	35 c0       	rjmp	.+106    	; 0xfa <main+0x7e>
	{
		KEYBOARD = ~(1<<i); //selektywne ustawienia PORTA
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	02 c0       	rjmp	.+4      	; 0x9a <main+0x1e>
  96:	88 0f       	add	r24, r24
  98:	99 1f       	adc	r25, r25
  9a:	2a 95       	dec	r18
  9c:	e2 f7       	brpl	.-8      	; 0x96 <main+0x1a>
  9e:	80 95       	com	r24
  a0:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	89 ef       	ldi	r24, 0xF9	; 249
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <main+0x2a>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x30>
  ac:	00 00       	nop
		_delay_ms(1);
		x = KEYBOARD_READ & 0x0F; //przypisanie dla odczytu stanu klawiatury
  ae:	89 b3       	in	r24, 0x19	; 25
  b0:	8f 70       	andi	r24, 0x0F	; 15
  b2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		
		switch (x) // sprawdzenie do jakiego case pasuje x
  b6:	8d 30       	cpi	r24, 0x0D	; 13
  b8:	79 f0       	breq	.+30     	; 0xd8 <main+0x5c>
  ba:	28 f4       	brcc	.+10     	; 0xc6 <main+0x4a>
  bc:	87 30       	cpi	r24, 0x07	; 7
  be:	a1 f0       	breq	.+40     	; 0xe8 <main+0x6c>
  c0:	8b 30       	cpi	r24, 0x0B	; 11
  c2:	71 f0       	breq	.+28     	; 0xe0 <main+0x64>
  c4:	20 c0       	rjmp	.+64     	; 0x106 <main+0x8a>
  c6:	8e 30       	cpi	r24, 0x0E	; 14
  c8:	19 f0       	breq	.+6      	; 0xd0 <main+0x54>
  ca:	8f 30       	cpi	r24, 0x0F	; 15
  cc:	89 f0       	breq	.+34     	; 0xf0 <main+0x74>
  ce:	1b c0       	rjmp	.+54     	; 0x106 <main+0x8a>
			tutaj nic nie robimy dlatego ze jezeli bedziemy zwracac return 0; to nie przejdzie do i = 5 i tak dalej dlatego 
			ze  case 0b00001111 jest defoltowym i w pierwszej iteracji jezeli jest przycisk wcisniety w PA1, PA2, PA3 to petla to nie zobaczy i zwroci 0
			*/
				break; //wychodzmy ze switch'a
			case 0b00001110: //wiersz 1 (u mnie kolumna)
				return i - 3; //sterownie miedzy weirszem zwiazanym z kolumna i zwrocenie
  d0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
  d4:	83 50       	subi	r24, 0x03	; 3
  d6:	18 c0       	rjmp	.+48     	; 0x108 <main+0x8c>
				break; //wychodzmy ze switch'a
			case 0b00001101://wiersz 2 (u mnie kolumna)
				return  i + 1;//sterownie miedzy weirszem zwiazanym z kolumna i zwrocenie
  d8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
  dc:	8f 5f       	subi	r24, 0xFF	; 255
  de:	14 c0       	rjmp	.+40     	; 0x108 <main+0x8c>
				break; //wychodzmy ze switch'a
			case 0b00001011://wiersz 3 (u mnie kolumna)
				return i + 5;//sterownie miedzy weirszem zwiazanym z kolumna i zwrocenie
  e0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
  e4:	8b 5f       	subi	r24, 0xFB	; 251
  e6:	10 c0       	rjmp	.+32     	; 0x108 <main+0x8c>
				break; //wychodzmy ze switch'a
			case 0b00000111://wiersz 4 (u mnie kolumna)
				return i + 9;//sterownie miedzy weirszem zwiazanym z kolumna i zwrocenie
  e8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
  ec:	87 5f       	subi	r24, 0xF7	; 247
  ee:	0c c0       	rjmp	.+24     	; 0x108 <main+0x8c>

	

inline uint8_t klawiatura()
{
	for (i = 4; i < 8; i++) // petla przechodzaca po wszystkim kolumnam klawiatury
  f0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
  f4:	8f 5f       	subi	r24, 0xFF	; 255
  f6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <i>
  fa:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <i>
  fe:	28 30       	cpi	r18, 0x08	; 8
 100:	38 f2       	brcs	.-114    	; 0x90 <main+0x14>
			default: // jezeli zaden z powyzszych case nie byl uruchomiony
				return 0xff; // jezeli mamy wcisniete 2 i wiecej przyciski to zapalami wszyscu ledy(tutaj moze byc blad dlatego ze nie moze to sprawdzic u siebie w programie)
				break; //wychodzmy ze switch'a
		}
	}
	return 0; // jezeli zaden przycisk nie byl wcisniety
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	01 c0       	rjmp	.+2      	; 0x108 <main+0x8c>
				break; //wychodzmy ze switch'a
			case 0b00000111://wiersz 4 (u mnie kolumna)
				return i + 9;//sterownie miedzy weirszem zwiazanym z kolumna i zwrocenie
				break; //wychodzmy ze switch'a
			default: // jezeli zaden z powyzszych case nie byl uruchomiony
				return 0xff; // jezeli mamy wcisniete 2 i wiecej przyciski to zapalami wszyscu ledy(tutaj moze byc blad dlatego ze nie moze to sprawdzic u siebie w programie)
 106:	8f ef       	ldi	r24, 0xFF	; 255

	while (1)
	{
		LED = klawiatura(); // zapisanie wyniku funkcji klawiatura w LED(PORTB)
 108:	88 bb       	out	0x18, r24	; 24
	}
 10a:	be cf       	rjmp	.-132    	; 0x88 <main+0xc>

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
