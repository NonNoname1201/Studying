
Lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000108  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008cd  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d8  00000000  00000000  00000add  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004cb  00000000  00000000  000010b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001580  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000355  00000000  00000000  000015f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000378  00000000  00000000  00001949  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001cc1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  64:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <pingpong>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  6c:	83 e0       	ldi	r24, 0x03	; 3
  6e:	88 bb       	out	0x18, r24	; 24
  70:	81 e0       	ldi	r24, 0x01	; 1
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	30 e0       	ldi	r19, 0x00	; 0
  78:	70 e0       	ldi	r23, 0x00	; 0
  7a:	e1 e0       	ldi	r30, 0x01	; 1
  7c:	91 11       	cpse	r25, r1
  7e:	1c c0       	rjmp	.+56     	; 0xb8 <pingpong+0x4c>
  80:	8f 5f       	subi	r24, 0xFF	; 255
  82:	68 b3       	in	r22, 0x18	; 24
  84:	a9 01       	movw	r20, r18
  86:	08 2e       	mov	r0, r24
  88:	02 c0       	rjmp	.+4      	; 0x8e <pingpong+0x22>
  8a:	44 0f       	add	r20, r20
  8c:	55 1f       	adc	r21, r21
  8e:	0a 94       	dec	r0
  90:	e2 f7       	brpl	.-8      	; 0x8a <pingpong+0x1e>
  92:	46 27       	eor	r20, r22
  94:	48 bb       	out	0x18, r20	; 24
  96:	68 b3       	in	r22, 0x18	; 24
  98:	4e ef       	ldi	r20, 0xFE	; 254
  9a:	48 0f       	add	r20, r24
  9c:	d9 01       	movw	r26, r18
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <pingpong+0x38>
  a0:	aa 0f       	add	r26, r26
  a2:	bb 1f       	adc	r27, r27
  a4:	4a 95       	dec	r20
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <pingpong+0x34>
  a8:	ad 01       	movw	r20, r26
  aa:	46 27       	eor	r20, r22
  ac:	48 bb       	out	0x18, r20	; 24
  ae:	87 30       	cpi	r24, 0x07	; 7
  b0:	f1 f4       	brne	.+60     	; 0xee <pingpong+0x82>
  b2:	86 e0       	ldi	r24, 0x06	; 6
  b4:	9e 2f       	mov	r25, r30
  b6:	1b c0       	rjmp	.+54     	; 0xee <pingpong+0x82>
  b8:	81 50       	subi	r24, 0x01	; 1
  ba:	68 b3       	in	r22, 0x18	; 24
  bc:	a9 01       	movw	r20, r18
  be:	08 2e       	mov	r0, r24
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <pingpong+0x5a>
  c2:	44 0f       	add	r20, r20
  c4:	55 1f       	adc	r21, r21
  c6:	0a 94       	dec	r0
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <pingpong+0x56>
  ca:	46 27       	eor	r20, r22
  cc:	48 bb       	out	0x18, r20	; 24
  ce:	68 b3       	in	r22, 0x18	; 24
  d0:	42 e0       	ldi	r20, 0x02	; 2
  d2:	48 0f       	add	r20, r24
  d4:	d9 01       	movw	r26, r18
  d6:	02 c0       	rjmp	.+4      	; 0xdc <pingpong+0x70>
  d8:	aa 0f       	add	r26, r26
  da:	bb 1f       	adc	r27, r27
  dc:	4a 95       	dec	r20
  de:	e2 f7       	brpl	.-8      	; 0xd8 <pingpong+0x6c>
  e0:	ad 01       	movw	r20, r26
  e2:	46 27       	eor	r20, r22
  e4:	48 bb       	out	0x18, r20	; 24
  e6:	81 11       	cpse	r24, r1
  e8:	02 c0       	rjmp	.+4      	; 0xee <pingpong+0x82>
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	97 2f       	mov	r25, r23
  ee:	a3 ed       	ldi	r26, 0xD3	; 211
  f0:	b0 e3       	ldi	r27, 0x30	; 48
  f2:	11 97       	sbiw	r26, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <pingpong+0x86>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <pingpong+0x8c>
  f8:	00 00       	nop
  fa:	c0 cf       	rjmp	.-128    	; 0x7c <pingpong+0x10>

000000fc <main>:
	}
}

int main(void)
{
	DDRB=0xff;
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	87 bb       	out	0x17, r24	; 23
	
    /* Replace with your application code */
    pingpong();
 100:	0e 94 36 00 	call	0x6c	; 0x6c <pingpong>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
