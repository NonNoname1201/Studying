
usart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000054  00800060  000001fe  00000292  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000b4  008000b4  000002e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000318  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007d5  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000659  00000000  00000000  00000ba1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d0  00000000  00000000  000011fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  000015cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000357  00000000  00000000  000016d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000011b  00000000  00000000  00001a27  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00001b42  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 89 00 	jmp	0x112	; 0x112 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ef       	ldi	r30, 0xFE	; 254
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3b       	cpi	r26, 0xB4	; 180
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 eb       	ldi	r26, 0xB4	; 180
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 3b       	cpi	r26, 0xB6	; 182
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f5 00 	call	0x1ea	; 0x1ea <main>
  8a:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <usart_init>:
		{
			UartString("znak prawidlowy\n\r");
		}
		else
		{
			UartString("blad\n\r");
  92:	10 bc       	out	0x20, r1	; 32
  94:	89 e1       	ldi	r24, 0x19	; 25
  96:	89 b9       	out	0x09, r24	; 9
  98:	88 e9       	ldi	r24, 0x98	; 152
  9a:	8a b9       	out	0x0a, r24	; 10
  9c:	86 e8       	ldi	r24, 0x86	; 134
  9e:	80 bd       	out	0x20, r24	; 32
  a0:	08 95       	ret

000000a2 <UART_TxChar>:
  a2:	5d 9b       	sbis	0x0b, 5	; 11
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <UART_TxChar>
  a6:	8c b9       	out	0x0c, r24	; 12
  a8:	08 95       	ret

000000aa <USART_putchar>:
  aa:	0e 94 51 00 	call	0xa2	; 0xa2 <UART_TxChar>
  ae:	08 95       	ret

000000b0 <UartString>:
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
  b4:	ec 01       	movw	r28, r24
  b6:	03 c0       	rjmp	.+6      	; 0xbe <UartString+0xe>
  b8:	0e 94 55 00 	call	0xaa	; 0xaa <USART_putchar>
  bc:	21 96       	adiw	r28, 0x01	; 1
  be:	88 81       	ld	r24, Y
  c0:	81 11       	cpse	r24, r1
  c2:	fa cf       	rjmp	.-12     	; 0xb8 <UartString+0x8>
  c4:	df 91       	pop	r29
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <timer0_init>:
  ca:	83 b7       	in	r24, 0x33	; 51
  cc:	84 60       	ori	r24, 0x04	; 4
  ce:	83 bf       	out	0x33, r24	; 51
  d0:	89 b7       	in	r24, 0x39	; 57
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	89 bf       	out	0x39, r24	; 57
  d6:	08 95       	ret

000000d8 <__vector_11>:
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	8f 93       	push	r24
  e4:	9f 93       	push	r25
  e6:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__data_end>
  ea:	84 36       	cpi	r24, 0x64	; 100
  ec:	31 f4       	brne	.+12     	; 0xfa <__vector_11+0x22>
  ee:	9b b3       	in	r25, 0x1b	; 27
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	89 27       	eor	r24, r25
  f4:	8b bb       	out	0x1b, r24	; 27
  f6:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__data_end>
  fa:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__data_end>
  fe:	8f 5f       	subi	r24, 0xFF	; 255
 100:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__data_end>
 104:	9f 91       	pop	r25
 106:	8f 91       	pop	r24
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <__vector_13>:
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	8f 93       	push	r24
 11e:	8c b1       	in	r24, 0x0c	; 12
 120:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <tempchar>
 124:	8f 91       	pop	r24
 126:	0f 90       	pop	r0
 128:	0f be       	out	0x3f, r0	; 63
 12a:	0f 90       	pop	r0
 12c:	1f 90       	pop	r1
 12e:	18 95       	reti

00000130 <Zadanie3>:
		}
	}
}

void Zadanie3(){
	timer0_init();
 130:	0e 94 65 00 	call	0xca	; 0xca <timer0_init>
	DDRA = 0xFF;
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00;
 138:	1b ba       	out	0x1b, r1	; 27
	sei();
 13a:	78 94       	sei
	int i = 0;
	while (i < 10)
 13c:	51 c0       	rjmp	.+162    	; 0x1e0 <Zadanie3+0xb0>
	{
		if(!tempchar == '\0'){
			if (tempchar == '1')
 13e:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <tempchar>
 142:	81 33       	cpi	r24, 0x31	; 49
 144:	29 f4       	brne	.+10     	; 0x150 <Zadanie3+0x20>
			{
				PORTA ^= 0x02;
 146:	9b b3       	in	r25, 0x1b	; 27
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	89 27       	eor	r24, r25
 14c:	8b bb       	out	0x1b, r24	; 27
 14e:	46 c0       	rjmp	.+140    	; 0x1dc <Zadanie3+0xac>
			}
			else if (tempchar == '2')
 150:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <tempchar>
 154:	82 33       	cpi	r24, 0x32	; 50
 156:	29 f4       	brne	.+10     	; 0x162 <Zadanie3+0x32>
			{
				PORTA ^= 0x04;
 158:	9b b3       	in	r25, 0x1b	; 27
 15a:	84 e0       	ldi	r24, 0x04	; 4
 15c:	89 27       	eor	r24, r25
 15e:	8b bb       	out	0x1b, r24	; 27
 160:	3d c0       	rjmp	.+122    	; 0x1dc <Zadanie3+0xac>
			}
			else if (tempchar == '3')
 162:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <tempchar>
 166:	83 33       	cpi	r24, 0x33	; 51
 168:	29 f4       	brne	.+10     	; 0x174 <Zadanie3+0x44>
			{
				PORTA ^= 0x08;
 16a:	9b b3       	in	r25, 0x1b	; 27
 16c:	88 e0       	ldi	r24, 0x08	; 8
 16e:	89 27       	eor	r24, r25
 170:	8b bb       	out	0x1b, r24	; 27
 172:	34 c0       	rjmp	.+104    	; 0x1dc <Zadanie3+0xac>
			}
			else if (tempchar == '4')
 174:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <tempchar>
 178:	84 33       	cpi	r24, 0x34	; 52
 17a:	29 f4       	brne	.+10     	; 0x186 <Zadanie3+0x56>
			{
				PORTA ^= 0x10;
 17c:	9b b3       	in	r25, 0x1b	; 27
 17e:	80 e1       	ldi	r24, 0x10	; 16
 180:	89 27       	eor	r24, r25
 182:	8b bb       	out	0x1b, r24	; 27
 184:	2b c0       	rjmp	.+86     	; 0x1dc <Zadanie3+0xac>
			}
			else if (tempchar == '5')
 186:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <tempchar>
 18a:	85 33       	cpi	r24, 0x35	; 53
 18c:	29 f4       	brne	.+10     	; 0x198 <Zadanie3+0x68>
			{
				PORTA ^= 0x20;
 18e:	9b b3       	in	r25, 0x1b	; 27
 190:	80 e2       	ldi	r24, 0x20	; 32
 192:	89 27       	eor	r24, r25
 194:	8b bb       	out	0x1b, r24	; 27
 196:	22 c0       	rjmp	.+68     	; 0x1dc <Zadanie3+0xac>
			}
			else if (tempchar == '6')
 198:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <tempchar>
 19c:	86 33       	cpi	r24, 0x36	; 54
 19e:	29 f4       	brne	.+10     	; 0x1aa <Zadanie3+0x7a>
			{
				PORTA ^= 0x40;
 1a0:	9b b3       	in	r25, 0x1b	; 27
 1a2:	80 e4       	ldi	r24, 0x40	; 64
 1a4:	89 27       	eor	r24, r25
 1a6:	8b bb       	out	0x1b, r24	; 27
 1a8:	19 c0       	rjmp	.+50     	; 0x1dc <Zadanie3+0xac>
			}
			else if (tempchar == '7')
 1aa:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <tempchar>
 1ae:	87 33       	cpi	r24, 0x37	; 55
 1b0:	21 f4       	brne	.+8      	; 0x1ba <Zadanie3+0x8a>
			{
				PORTA ^= 0x80;
 1b2:	8b b3       	in	r24, 0x1b	; 27
 1b4:	80 58       	subi	r24, 0x80	; 128
 1b6:	8b bb       	out	0x1b, r24	; 27
 1b8:	11 c0       	rjmp	.+34     	; 0x1dc <Zadanie3+0xac>
			}
			else if (tempchar == 'c')
 1ba:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <tempchar>
 1be:	83 36       	cpi	r24, 0x63	; 99
 1c0:	11 f4       	brne	.+4      	; 0x1c6 <Zadanie3+0x96>
			{
				PORTA = 0x00;
 1c2:	1b ba       	out	0x1b, r1	; 27
 1c4:	0b c0       	rjmp	.+22     	; 0x1dc <Zadanie3+0xac>
			}
			else if (tempchar == 's')
 1c6:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <tempchar>
 1ca:	83 37       	cpi	r24, 0x73	; 115
 1cc:	19 f4       	brne	.+6      	; 0x1d4 <Zadanie3+0xa4>
			{
				PORTA = 0xFF;
 1ce:	8f ef       	ldi	r24, 0xFF	; 255
 1d0:	8b bb       	out	0x1b, r24	; 27
 1d2:	04 c0       	rjmp	.+8      	; 0x1dc <Zadanie3+0xac>
			}
			else
			{
				UartString("blad\n\r");
 1d4:	82 ea       	ldi	r24, 0xA2	; 162
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 58 00 	call	0xb0	; 0xb0 <UartString>
			}
			tempchar = '\0';
 1dc:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <tempchar>
	PORTA = 0x00;
	sei();
	int i = 0;
	while (i < 10)
	{
		if(!tempchar == '\0'){
 1e0:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <tempchar>
 1e4:	81 11       	cpse	r24, r1
 1e6:	ab cf       	rjmp	.-170    	; 0x13e <Zadanie3+0xe>
 1e8:	fb cf       	rjmp	.-10     	; 0x1e0 <Zadanie3+0xb0>

000001ea <main>:
	}
}

int main()
{
    usart_init();
 1ea:	0e 94 49 00 	call	0x92	; 0x92 <usart_init>
	UartString("\nGotowy\n\r");
 1ee:	89 ea       	ldi	r24, 0xA9	; 169
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 58 00 	call	0xb0	; 0xb0 <UartString>
	
	
    Zadanie3();
 1f6:	0e 94 98 00 	call	0x130	; 0x130 <Zadanie3>

000001fa <_exit>:
 1fa:	f8 94       	cli

000001fc <__stop_program>:
 1fc:	ff cf       	rjmp	.-2      	; 0x1fc <__stop_program>
